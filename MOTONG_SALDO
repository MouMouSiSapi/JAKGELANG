#include <SPI.h>
#include <MFRC522.h>

#define RST_PIN         9          // Pin RST
#define SS_PIN          10         // Pin SDA

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance

MFRC522::MIFARE_Key key;
long balance = 0; // Variabel untuk saldo
long amountToDeduct = 3500; // Jumlah tetap yang akan dikurangi

void setup() {
  Serial.begin(9600);   // Inisialisasi komunikasi serial
  SPI.begin();          // Inisialisasi SPI bus
  mfrc522.PCD_Init();   // Inisialisasi MFRC522

  // Inisialisasi kunci default
  for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;

  Serial.println("Place your card to the reader...");
}

void loop() {
  // Cari kartu RFID
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return;
  }

  // Pilih satu kartu RFID
  if (!mfrc522.PICC_ReadCardSerial()) {
    return;
  }

  // Tampilkan UID kartu
  Serial.print("UID tag :");
  String content = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
    content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
    content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();

  // Tentukan blok memori untuk saldo (misalnya, blok 4)
  byte blockAddr = 4;

  // Autentikasi sebelum membaca
  MFRC522::StatusCode status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockAddr, &key, &(mfrc522.uid));
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Authentication failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }

  // Baca saldo dari blok memori
  byte buffer[18];
  byte size = sizeof(buffer);

  status = mfrc522.MIFARE_Read(blockAddr, buffer, &size);
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Reading failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }

  // Konversi data blok ke saldo
  balance = 0;
  for (int i = 0; i < 4; i++) {
    balance <<= 8;
    balance |= buffer[i];
  }

  // Tampilkan saldo saat ini
  Serial.print("Current Balance: ");
  Serial.println(balance);

  // Kurangi saldo
  if (balance >= amountToDeduct) {
    balance -= amountToDeduct;
    Serial.print("New Balance after deduction: ");
    Serial.println(balance);

    // Konversi saldo ke data blok
    for (int i = 0; i < 4; i++) {
      buffer[3 - i] = (balance >> (8 * i)) & 0xFF;
    }

    // Tulis saldo baru ke blok memori
    status = mfrc522.MIFARE_Write(blockAddr, buffer, 16);
    if (status != MFRC522::STATUS_OK) {
      Serial.print("Writing failed: ");
      Serial.println(mfrc522.GetStatusCodeName(status));
      return;
    }
  } else {
    Serial.println("Insufficient balance.");
  }

  // Hentikan otentikasi
  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();

  delay(100); // Tunda selama 1 detik sebelum membaca ulang
}
